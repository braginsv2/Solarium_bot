from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, ContentType
import asyncio
import cv2
from datetime import datetime
from dotenv import load_dotenv
import numpy as np
from io import BytesIO
import os
from PIL import Image
from pyzbar.pyzbar import decode, ZBarSymbol
import qrcode
import sqlite3

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SOLARIUM_ADDRESS = os.getenv('SOLARIUM_ADDRESS')
SOLARIUM_PHONE = os.getenv('SOLARIUM_PHONE')
SOLARIUM_SOCIAL = os.getenv('SOLARIUM_SOCIAL')

class RegistrationStates(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_birthdate = State()
    waiting_for_phone = State()

class DetectQR(StatesGroup):
    waiting_for_id = State()
    waiting_for_minutes = State()

class MinDetectQR(StatesGroup):
    waiting_for_id = State()
    waiting_for_minutes = State()

class allSpam(StatesGroup):
    waiting_for_spam = State()
    waiting_for_compl = State()

class SolariumBot:
    def __init__(self, token: str):
        self.storage = MemoryStorage()
        self.bot = Bot(token=token)
        self.dp = Dispatcher(self.bot, storage=self.storage)
        self.admin_ids = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []
        self.pending_birth_date = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_db()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è aiogram 3.20
        self.dp.register_message_handler(self.start_handler, CommandStart())
        self.dp.register_message_handler(self.main_menu_handler, lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        self.dp.register_message_handler(self.registration_handler, lambda message: message.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        self.dp.register_message_handler(self.user_menu_handler, lambda message: message.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        self.dp.register_message_handler(self.admin_menu_handler, lambda message: message.text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.dp.register_message_handler(self.profile_handler, lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        self.dp.register_message_handler(self.qr_handler, lambda message: message.text == "üì± QR-–∫–æ–¥")
        self.dp.register_message_handler(self.contact_handler, lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        self.dp.register_message_handler(self.recommendations_handler, lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã")
        self.dp.register_message_handler(self.help_user_handler, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.dp.register_message_handler(self.add_minutes_handler, lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∏–Ω—É—Ç—ã")
        self.dp.register_message_handler(self.minus_minutes_handler, lambda message: message.text == "‚ûñ –°–ø–∏—Å–∞—Ç—å –º–∏–Ω—É—Ç—ã")
        #self.dp.register_message_handler(self.contact_handler, lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.dp.register_message_handler(self.spam_handler, lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
        #self.dp.register_message_handler(self.help_user_handler, lambda message: message.text == "üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        #self.dp.register_message_handler(self.help_user_handler, lambda message: message.text == "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        #self.dp.register_message_handler(self.help_user_handler, lambda message: message.text == "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω—É—Ç
        self.dp.register_message_handler(self.add_detect, state=DetectQR.waiting_for_id, content_types=[ContentType.TEXT, ContentType.PHOTO])
        self.dp.register_message_handler(self.num_minutes, state=DetectQR.waiting_for_minutes)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è –º–∏–Ω—É—Ç
        self.dp.register_message_handler(self.minus_detect, state=MinDetectQR.waiting_for_id, content_types=[ContentType.TEXT, ContentType.PHOTO])
        self.dp.register_message_handler(self.minus_num_minutes, state=MinDetectQR.waiting_for_minutes)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–∏–Ω—É—Ç
        self.dp.register_message_handler(self.spam, state=allSpam.waiting_for_spam)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.dp.register_message_handler(self.process_fullname, state=RegistrationStates.waiting_for_fullname)
        self.dp.register_message_handler(self.process_birthdate, state=RegistrationStates.waiting_for_birthdate)
        self.dp.register_message_handler(self.process_phone, state=RegistrationStates.waiting_for_phone)
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        self.conn = sqlite3.connect('solarium_bot.db')
        self.cursor = self.conn.cursor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            fullname TEXT,
            birthdate TEXT,
            phone TEXT,
            registration_date TEXT,
            number_minutes INT,
            total_minutes INT
                            
        )
        ''')
        self.conn.commit()
    
    async def close_db(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.conn.close()
    
    def user_exists(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
        return self.cursor.fetchone() is not None
    
    def add_user(self, user_id: int, username: str, fullname: str, birthdate: str, phone: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        registration_date = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
        self.cursor.execute('''
        INSERT INTO users (user_id, username, fullname, birthdate, phone, registration_date, number_minutes, total_minutes)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, username, fullname, birthdate, phone, registration_date, 0, 0))
        self.conn.commit()

    def find_white_square(self, image):
        """–ù–∞—Ö–æ–¥–∏—Ç –±–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ROI"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HSV –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –±–µ–ª–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ HSV
        lower_white = np.array([0, 0, 200])
        upper_white = np.array([180, 30, 255])
        mask = cv2.inRange(hsv, lower_white, upper_white)
        
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        kernel = np.ones((5,5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        
        # –ò—â–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã
        squares = []
        for cnt in contours:
            # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä
            epsilon = 0.1 * cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, epsilon, True)
            
            # –ò—â–µ–º —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏
            if len(approx) == 4:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ—Å—Ç—å
                area = cv2.contourArea(approx)
                x,y,w,h = cv2.boundingRect(approx)
                aspect_ratio = float(w)/h
                
                if 0.8 < aspect_ratio < 1.2 and area > 1000:  # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ñ–æ—Ä–º–µ
                    squares.append(approx)
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã, –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
        if squares:
            largest_square = max(squares, key=cv2.contourArea)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            rect = cv2.minAreaRect(largest_square)
            box = cv2.boxPoints(rect)
            box = box.astype(np.int32)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É ROI
            width = int(rect[1][0])
            height = int(rect[1][1])
            
            # –¢–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            src_pts = box.astype("float32")
            dst_pts = np.array([[0, height-1],
                            [0, 0],
                            [width-1, 0],
                            [width-1, height-1]], dtype="float32")
            
            # –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            M = cv2.getPerspectiveTransform(src_pts, dst_pts)
            warped = cv2.warpPerspective(image, M, (width, height))
            return warped
        
        return None  

    def decode_qr_from_roi(self, roi):
        """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        # –£–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR
        decoded = decode(thresh, symbols=[ZBarSymbol.QRCODE])
        if decoded:
            return decoded[0].data.decode('ascii')
        return None

    def get_main_keyboard(self, is_admin: bool = False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        if is_admin:
            keyboard = [
                [KeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")],
                [KeyboardButton(text="‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]
            ]
        else:
            keyboard = [
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üì± QR-–∫–æ–¥")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
            [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
        ]
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )

    def get_user_keyboard(self, is_admin: bool = False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if is_admin:
            keyboard = [
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="üì± QR-–∫–æ–¥")],
                [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
                [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
                [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            return ReplyKeyboardMarkup(
                keyboard=keyboard,
                resize_keyboard=True
            )
        else:
            keyboard = [
                [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="üì± QR-–∫–æ–¥")],
                [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
                [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
            ]
            return ReplyKeyboardMarkup(
                keyboard=keyboard,
                resize_keyboard=True
            )
    
    

    def get_admin_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = [
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∏–Ω—É—Ç—ã")],
            [KeyboardButton(text="‚ûñ –°–ø–∏—Å–∞—Ç—å –º–∏–Ω—É—Ç—ã")],
            #[KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
            #[KeyboardButton(text="üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            #[KeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            #[KeyboardButton(text="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    
    async def start_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        is_admin = message.from_user.id in self.admin_ids
        
        if self.user_exists(message.from_user.id):
            await message.answer(
                "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
                reply_markup=self.get_main_keyboard(is_admin)
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–æ–ª—è—Ä–∏—è!",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
                    resize_keyboard=True
                    )
            )
    
    async def main_menu_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        is_admin = message.from_user.id in self.admin_ids
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.get_main_keyboard(is_admin)
        )
    
    async def registration_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if self.user_exists(message.from_user.id):
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
        
        await message.answer(
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await RegistrationStates.waiting_for_fullname.set()
    
    async def process_fullname(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û"""
        if len(message.text.split()) >= 2:
            async with state.proxy() as data:
                data['fullname'] = message.text
            
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            await RegistrationStates.next()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –§–ò–û:")
            return
    
    async def process_birthdate(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            birthdate = datetime.strptime(message.text, '%d.%m.%Y').date()
            async with state.proxy() as data:
                data['birthdate'] = birthdate.strftime('%d-%m-%Y')
            
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            await RegistrationStates.next()
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    
    async def process_phone(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        phone = message.text
        cleaned = ''.join(c for c in phone if c.isdigit() or c == '+')
        if len(cleaned) == 12 and cleaned.startswith('+7'):
            async with state.proxy() as data:
                fullname = data['fullname']
                birthdate = data['birthdate']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.add_user(
                user_id=message.from_user.id,
                username=message.from_user.username,
                fullname=fullname,
                birthdate=birthdate,
                phone=phone
            )
            
            await message.answer(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                reply_markup=self.get_main_keyboard(message.from_user.id in self.admin_ids)
            )
            await state.finish()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return
            
    
    async def user_menu_handler(self, message: types.Message):
        is_admin = message.from_user.id in self.admin_ids
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.user_exists(message.from_user.id):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
            return
        
        await message.answer(
            "–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=self.get_user_keyboard(is_admin)
        )
    
    async def admin_menu_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        if message.from_user.id in self.admin_ids:
            await message.answer(
                "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=self.get_admin_keyboard()
            )
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    async def profile_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        is_admin = message.from_user.id in self.admin_ids
        self.cursor.execute('SELECT fullname, birthdate, phone, number_minutes, total_minutes FROM users WHERE user_id = ?', (message.from_user.id,))
        result = self.cursor.fetchone()
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–§–ò–û: {result[0]}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {result[2]}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {result[1]}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç: {result[3]} –º–∏–Ω—É—Ç\n"
            f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∏–Ω—É—Ç: {result[4]} –º–∏–Ω—É—Ç"
        )
        await message.answer(
                profile_text,
                reply_markup=self.get_user_keyboard(is_admin)
            )
        
    async def qr_handler(self, message: types.Message):
        is_admin = message.from_user.id in self.admin_ids
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(message.from_user.id)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        bio = BytesIO()
        bio.name = 'qr.png'
        img.save(bio, 'PNG')
        bio.seek(0)
        photo = InputFile(bio, filename='qr.png')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        await message.reply_photo(
            photo=photo,
            caption=f"–í–∞—à QR-–∫–æ–¥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ–ª—è—Ä–∏–∏",
            reply_markup=self.get_user_keyboard(is_admin)
        )

    async def contact_handler(self, message: types.Message):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        is_admin = message.from_user.id in self.admin_ids
        contact_text = (
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            f"–ê–¥—Ä–µ—Å: {SOLARIUM_ADDRESS}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {SOLARIUM_PHONE}\n"
            f"–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: {SOLARIUM_SOCIAL}"
        )
        await message.answer(
                contact_text,
                reply_markup=self.get_user_keyboard(is_admin)
            )

    async def recommendations_handler(self, message: types.Message):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        is_admin = message.from_user.id in self.admin_ids
        recommendations_text = (
            "1. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (3-5 –º–∏–Ω—É—Ç)\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –∑–∞–≥–∞—Ä–∞\n"
            "3. –ù–µ –∑–∞–≥–æ—Ä–∞–π—Ç–µ —á–∞—â–µ 2-3 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
            "4. –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –¥–æ –∏ –ø–æ—Å–ª–µ —Å–µ–∞–Ω—Å–∞\n"
            "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\n"
            "6. –ù–µ –∑–∞–≥–æ—Ä–∞–π—Ç–µ –Ω–∞—Ç–æ—â–∞–∫\n"
            "7. –ü–æ—Å–ª–µ —Å–µ–∞–Ω—Å–∞ –Ω–∞–Ω–µ—Å–∏—Ç–µ —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º"
        )
        await message.answer(
                recommendations_text,
                reply_markup=self.get_user_keyboard(is_admin)
            )
        
    async def help_user_handler(self, message: types.Message):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        is_admin = message.from_user.id in self.admin_ids
        help_user_text = (
            "‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
            "1. –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
            "2. QR-–∫–æ–¥ - –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–æ–ª—è—Ä–∏–∏, –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏\n"
            "3. –ö–æ–Ω—Ç–∞–∫—Ç—ã - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ª—è—Ä–∏–∏\n"
            "4. –°–æ–≤–µ—Ç—ã - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–≥–∞—Ä—É\n"
        )
        await message.answer(
                help_user_text,
                reply_markup=self.get_user_keyboard(is_admin)
            )  

    async def add_minutes_handler(self, message: types.Message):

        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ ID Telegram –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                    )
            ) 
        await DetectQR.waiting_for_id.set()
    async def add_detect(self, message: types.Message, state: FSMContext):
        if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
            await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                            reply_markup=self.get_admin_keyboard()
                            )
        else:
            
            if message.text:
                try:
                    async with state.proxy() as data:
                        data['photo'] = message.text
                    if not self.user_exists(data["photo"]):
                        raise
                    await message.answer(
                        "–í–≤–µ–¥–∏—Ç–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                            resize_keyboard=True
                            )
                    )
                    await DetectQR.next()
                except Exception as e:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            elif message.photo:
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
                photo = message.photo[-1]
                file = await message.bot.get_file(photo.file_id)
                downloaded_file = await message.bot.download_file(file.file_path)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
                img_array = np.frombuffer(downloaded_file.read(), dtype=np.uint8)
                image = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
                try:
                    # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if image is None:
                        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.")
                        return
                    roi = self.find_white_square(image)
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR-–∫–æ–¥
                    telegram_id = self.decode_qr_from_roi(roi)
                    
                    if not telegram_id:
                        await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.")
                        return
                    
    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
                    async with state.proxy() as data:
                        data['photo'] = telegram_id
                    if not self.user_exists(data["photo"]):
                        raise
                    await message.answer(
                        "–í–≤–µ–¥–∏—Ç–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                            resize_keyboard=True
                            )
                    )
                    await DetectQR.next()
                except Exception as e:
                    print(f"Error: {e}")
                    await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def num_minutes(self, message: types.Message, state: FSMContext):
        try:
            if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
                await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                                reply_markup=self.get_admin_keyboard()
                                )
            else:
                async with state.proxy() as data:
                    photo = data['photo']
                if self.user_exists(photo):
                    self.cursor.execute('''
                    SELECT number_minutes FROM users WHERE user_id = ? 
                    ''', (photo,))
                    result = self.cursor.fetchone()
                    self.cursor.execute('''
                    UPDATE users SET number_minutes = ? WHERE user_id = ? 
                    ''', (result[0]+int(message.text), int(photo)))
                    self.conn.commit()
                    await message.answer(
                        "–ú–∏–Ω—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                        reply_markup=self.get_admin_keyboard()
                    )
                    await state.finish()
                else:
                    raise
        except Exception as e:
            print(f"Error: {e}")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                    )
                )
    async def minus_minutes_handler(self, message: types.Message):

        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ ID Telegram –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                    )
            ) 
        await MinDetectQR.waiting_for_id.set()
    async def minus_detect(self, message: types.Message, state: FSMContext):
        if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
            await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                            reply_markup=self.get_admin_keyboard()
                            )
        else:
            if message.text:
                try:
                    async with state.proxy() as data:
                        data['photo'] = message.text
                    if not self.user_exists(data["photo"]):
                        raise
                    await message.answer(
                        "–í–≤–µ–¥–∏—Ç–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                            resize_keyboard=True
                            )
                    )
                    await MinDetectQR.next()
                except Exception as e:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            elif message.photo:
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
                photo = message.photo[-1]
                file = await message.bot.get_file(photo.file_id)
                downloaded_file = await message.bot.download_file(file.file_path)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
                img_array = np.frombuffer(downloaded_file.read(), dtype=np.uint8)
                image = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
                try:
                    # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if image is None:
                        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.")
                        return
                    roi = self.find_white_square(image)
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR-–∫–æ–¥
                    telegram_id = self.decode_qr_from_roi(roi)
                    
                    if not telegram_id:
                        await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.")
                        return
                    
    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
                    async with state.proxy() as data:
                        data['photo'] = telegram_id
                    if not self.user_exists(data["photo"]):
                        raise
                    await message.answer(
                        "–í–≤–µ–¥–∏—Ç–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                            resize_keyboard=True
                            )
                    )
                    await MinDetectQR.next()
                except Exception as e:
                    print(f"Error: {e}")
                    await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def minus_num_minutes(self, message: types.Message, state: FSMContext):
        try:
            if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
                await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                reply_markup=self.get_admin_keyboard()
                                )
            else:
                async with state.proxy() as data:
                    photo = data['photo']
                if self.user_exists(photo):
                    self.cursor.execute('''
                    SELECT number_minutes, total_minutes FROM users WHERE user_id = ? 
                    ''', (photo,))
                    result = self.cursor.fetchone()
                    if result[0]>=int(message.text):
                        self.cursor.execute('''
                        UPDATE users SET number_minutes = ?, total_minutes = ? WHERE user_id = ? 
                        ''', (result[0]-int(message.text),result[1]+int(message.text), int(photo)))
                        self.conn.commit()
                        await message.answer(
                            "–ú–∏–Ω—É—Ç—ã —Å–ø–∏—Å–∞–Ω—ã",
                            reply_markup=self.get_admin_keyboard()
                        )
                        await state.finish()
                    else: 
                        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∏–Ω—É—Ç")
                        return
                else:
                    raise
        except Exception as e:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                    )
                )
    async def spam_handler(self, message: types.Message):
        
        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                    )
            ) 
        await allSpam.waiting_for_spam.set()

    async def spam(self, message: types.Message, state: FSMContext):
        if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                            reply_markup=self.get_admin_keyboard()
                            )
        else:
            self.cursor.execute("SELECT user_id FROM users")
            result = self.cursor.fetchone()
            for id in result:
                await self.bot.send_message(
                            chat_id=id,
                            text=message.text
                        )
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                                reply_markup=self.get_admin_keyboard()
                                )
            await state.finish() 
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
    
    solarium_bot = SolariumBot(token)
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await solarium_bot.dp.start_polling()
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        await solarium_bot.close_db()

if __name__ == '__main__':
    asyncio.run(main())
